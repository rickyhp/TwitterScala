Spark Core is the foundation of the overall project. It provides distributed task dispatching, scheduling, and basic I/O
functionalities, exposed through an application programming interface (for Java, Python, Scala, and R) centered on the
RDD abstraction (the Java API is available for other JVM languages, but is also usable for some other non-JVM languages,
such as Julia,
that can connect to the JVM). This interface mirrors a functional/higher-order model of programming: a
"driver" program invokes parallel operations such as map, filter or reduce on an RDD by passing a function to Spark,
which then schedules the function's execution in parallel on the cluster.
These operations, and additional ones such as
joins, take RDDs as input and produce new RDDs. RDDs are immutable and their operations are lazy; fault-tolerance is
achieved by keeping track of the "lineage" of each RDD (the sequence of operations that produced it) so that it can be
reconstructed in the case of data loss. RDDs can contain any type of Python, Java, or Scala objects.
Besides the RDD-oriented functional style of programming, Spark provides two restricted forms of shared variables:
broadcast variables reference read-only data that needs to be available on all nodes, while accumulators can be used to
program reductions in an imperative style.
A typical example of RDD-centric functional programming is the following Scala program that computes the frequencies
of all words occurring in a set of text files and prints the most common ones. Each map, flatMap (a variant of map) and
reduceByKey takes an anonymous function that performs a simple operation on a single data item (or a pair of items),
and applies its argument to transform an RDD into a new RDD.